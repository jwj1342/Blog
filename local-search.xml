<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Database_learning</title>
    <link href="/2022/05/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="5月4日数据库笔记"><a href="#5月4日数据库笔记" class="headerlink" title="5月4日数据库笔记"></a>5月4日数据库笔记</h2><p>三个表如下：</p><table><thead><tr><th align="center">表名称</th><th align="center">表内容</th></tr></thead><tbody><tr><td align="center"><strong>B</strong>图书信息表</td><td align="center"><img src="https://s2.loli.net/2022/05/04/I8lYGWnFjA3kSN2.png" alt="image-20220504211025640"></td></tr><tr><td align="center"><strong>OD</strong>(读者订购图书表)</td><td align="center"><img src="https://s2.loli.net/2022/05/04/IkEMJf3QAyaVUtj.png" alt="image-20220504211139907"></td></tr><tr><td align="center"><strong>r</strong>(读者相关信息表)</td><td align="center"><img src="https://s2.loli.net/2022/05/04/oq6MhCr4HAciflz.png" alt="image-20220504211205623"></td></tr></tbody></table><p>做出如下查询：</p><ol><li><p>找出读者所在城市是“shanghai”的身份是“professor”的读者，或所在城市名包含“jing”的身份为“student”的读者的读者号及身份，按读者号的降序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Rno,STATUS <br><span class="hljs-keyword">FROM</span> r <br><span class="hljs-keyword">WHERE</span> (CITY <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;shanghai&#x27;</span> <span class="hljs-keyword">AND</span> STATUS <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Professor&#x27;</span>) <span class="hljs-keyword">OR</span> (city <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%jing%&#x27;</span> <span class="hljs-keyword">AND</span> STATUS <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Student&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Rno <span class="hljs-keyword">DESC</span> ;<br></code></pre></td></tr></table></figure></li><li><p>对每一种有读者订购的图书，找出书号及有读者订购该书读者所在的所有城市，输出结果包括：书号和城市（输出的列取别名）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Bno <span class="hljs-string">&#x27;书号&#x27;</span>,CITY <span class="hljs-string">&#x27;城市&#x27;</span><br><span class="hljs-keyword">FROM</span> od,r<br><span class="hljs-keyword">WHERE</span> od.Rno<span class="hljs-operator">=</span>r.Rno<br></code></pre></td></tr></table></figure></li><li><p>找出订购了书号为B2的图书的读者姓名及所在城市(用两种方法做：连接、嵌套)</p><p>​    连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Rname,CITY<br><span class="hljs-keyword">FROM</span> od,r<br><span class="hljs-keyword">WHERE</span> od.Bno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B2&#x27;</span> <span class="hljs-keyword">AND</span> od.Rno<span class="hljs-operator">=</span>r.Rno<br></code></pre></td></tr></table></figure><p>​    嵌套：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Rname,CITY<br><span class="hljs-keyword">FROM</span> r<br><span class="hljs-keyword">WHERE</span> rno <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> rno <br><span class="hljs-keyword">FROM</span> od<br><span class="hljs-keyword">WHERE</span> Bno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B2&#x27;</span><br>);<br></code></pre></td></tr></table></figure><blockquote><p>本题中，最外层的是找到从r表里找，满足rno条件的（rno条件为:在od表中存在且Bno为‘B2’）。我们可以看到两层嵌套的传递，是其中相关联的列。而且题目所要求条件所在的表在越外层。</p></blockquote></li><li><p>找出有一个以上读者订购的图书书号和图书名</p><p>嵌套：（错了！！！！！）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Bno,Bname<br><span class="hljs-keyword">FROM</span> b<br><span class="hljs-keyword">WHERE</span> Bno <span class="hljs-keyword">IN</span>(<br><span class="hljs-keyword">SELECT</span> Bno<br><span class="hljs-keyword">FROM</span> od<br><span class="hljs-comment">/*WHERE Rno IN (</span><br><span class="hljs-comment">SELECT Rno</span><br><span class="hljs-comment">FROM r*/</span><br>)<br>);<br></code></pre></td></tr></table></figure><blockquote><p>上面的代码从最开始要找的bno与bname，找到存在这两个量的表在b。其中考虑到约束条件：一个以上读者订阅，我们经过观察发现在od表内的所有bno都是有读者订阅的。因此我们考虑嵌套查询od表内的bno。</p><p>ps.在一开始并没有发现od表内的Bno是都有读者订阅的，所以注释掉一部分依然对。</p></blockquote><p>聚集函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> b.Bno,bname<br><span class="hljs-keyword">FROM</span> od,b<br><span class="hljs-keyword">WHERE</span> od.Bno<span class="hljs-operator">=</span>b.Bno<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> bno <br><span class="hljs-keyword">having</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p> 求<strong>至少</strong>订购了<strong>一本</strong>《Pascal》的<strong>读者姓名</strong></p></li></ol>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Rname<br><span class="hljs-keyword">FROM</span> r<br><span class="hljs-keyword">WHERE</span> Rno <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> Rno<br><span class="hljs-keyword">FROM</span> od<br><span class="hljs-keyword">WHERE</span> Bno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B2&#x27;</span><br>);<br></code></pre></td></tr></table></figure><blockquote><p>题目要求找出读者姓名，我们观察发现读者姓名常出现在r表内有读者姓名。题目约束条件是至少订购一本Pascal。我们发现这本书的书号是B2，我们只要嵌套查询od表内，哪些rno与bno=B2有关系，便可。如果再详细一点便是：</p></blockquote>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Rname<br><span class="hljs-keyword">FROM</span> r<br><span class="hljs-keyword">WHERE</span> Rno <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> Rno<br><span class="hljs-keyword">FROM</span> od<br><span class="hljs-keyword">WHERE</span> Bno <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> Bno<br><span class="hljs-keyword">FROM</span> b<br><span class="hljs-keyword">WHERE</span> Bname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Pascal&#x27;</span><br>)<br>);<br></code></pre></td></tr></table></figure><blockquote><p>上述代码把od表内的Bno与b表中的Bno进行连接</p></blockquote><ol start="6"><li><p>找出<strong>没有订购</strong>B1号图书的读者号</p><p>方法1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> rno<br><span class="hljs-keyword">FROM</span> r<br><span class="hljs-keyword">WHERE</span> rno <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> rno <br><span class="hljs-keyword">FROM</span> od<br><span class="hljs-keyword">WHERE</span> bno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B1&#x27;</span><br>);<br></code></pre></td></tr></table></figure><blockquote><p>上面的是标准答案，第一遍并没有想出来，原因是没有搞清楚嵌套查询的逻辑。通过上面的我们可以看出：先遍历r表中的每个元素即从R1~R5,每次遍历的同时检测这个rno是否符合条件。条件：将rno传到内层查询，如果不在内层查询（NOT IN）即返回真。</p><p>在以后查询不符合某种条件时，可以求与之相对的对立面，即符合该种条件，再使用嵌套非语句排除在外。</p></blockquote><p>方法2:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> rno<br><span class="hljs-keyword">FROM</span> r<br><span class="hljs-keyword">WHERE</span>  <span class="hljs-keyword">NOT</span>  <span class="hljs-keyword">EXISTS</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> od<br><span class="hljs-keyword">WHERE</span> bno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B1&#x27;</span> <span class="hljs-keyword">AND</span> od.Rno<span class="hljs-operator">=</span>r.Rno<br>);<br></code></pre></td></tr></table></figure><blockquote></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A_Learning</title>
    <link href="/2022/05/02/cs61a%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/02/cs61a%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="WEEK-1"><a href="#WEEK-1" class="headerlink" title="WEEK 1"></a>WEEK 1</h1><p>The first  half week is mainly about how to use bash and how to use the OK system in website.</p><p>In the next half week, mostly it’s about python basic knowledge.</p><h3 id="How-to-use-git-bash"><a href="#How-to-use-git-bash" class="headerlink" title="How to use git bash"></a>How to use git bash</h3><ul><li><code>ls</code>: list all files</li><li><code>cd &lt;path&gt;</code>: change the specified directory</li><li><code>mkdir &lt;dir name&gt;</code>: to create a directory</li><li><code>mv &lt;source file&gt;&lt;destination path&gt;</code>: move a file</li><li><code>unzip &lt;source file&gt;</code> : to unzip a file</li><li><code>winpyt python</code>: to open the python edit space<h3 id="How-to-use-the-OK-system"><a href="#How-to-use-the-OK-system" class="headerlink" title="How to use the OK system"></a>How to use the OK system</h3></li><li><code>python ok -q &lt;qustion&gt;</code>: to test a specific question</li><li><code>python ok</code>: to test all the question</li><li><code>python ok -v</code>: to see how you did on all tests</li><li><code>python ok --local</code>: to test it locally</li></ul><h3 id="Python-arithmetic-expressions"><a href="#Python-arithmetic-expressions" class="headerlink" title="Python arithmetic expressions"></a>Python arithmetic expressions</h3><ul><li>Floating point division (<code>/</code>): divides the first number number by the second, evaluating to a number with a decimal point <em>even if the numbers divide evenly</em>.</li><li>Floor division (<code>//</code>): divides the first number by the second and then rounds down, evaluating to an integer.</li><li>Modulo (<code>%</code>): evaluates to the positive remainder left over from division.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> / <span class="hljs-number">4</span><br><span class="hljs-number">1.75</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>(<span class="hljs-number">2</span> + <span class="hljs-number">6</span>) / <span class="hljs-number">4</span><br><span class="hljs-number">2.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> // <span class="hljs-number">4</span>        <span class="hljs-comment"># Floor division (rounding down)</span><br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> % <span class="hljs-number">4</span>         <span class="hljs-comment"># Modulus (remainder of 7 // 4)</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><hr><h3 id="The-difference-between-Python-and-C"><a href="#The-difference-between-Python-and-C" class="headerlink" title="The difference between Python and C++"></a>The difference between Python and C++</h3><p>when I learn C++, the <code>if</code> are like:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(expression)&#123;<br>    &lt;suite&gt;;<br>    &lt;suite&gt;;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    &lt;suite&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p>But in Python it’s more like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> &lt;expression&gt;:<br>    &lt;suite&gt;<br><span class="hljs-keyword">elif</span> &lt;expression&gt;:<br>    &lt;suite&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;suite&gt;<br></code></pre></td></tr></table></figure><blockquote><p>Pay attention to the  <code>elif</code> .It’s different to the C++.And the expression part don’t need to have a <code>( )</code> But need have a<code>:</code></p></blockquote><p>The next it’s the <code>while</code> difference:</p><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(expression)&#123;<br>    &lt;suite&gt;;<br>    &lt;suite&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p>In Python it’s more like :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> &lt;expression&gt;:<br>    &lt;suite&gt;<br>    &lt;suite&gt;<br></code></pre></td></tr></table></figure><h3 id="About-the-function"><a href="#About-the-function" class="headerlink" title="About the function"></a>About the function</h3><p>It’s pretty familiar with C++ about the function. In Python it’s like this one:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> &lt;<span class="hljs-title">name</span>&gt;(<span class="hljs-params">&lt;formal parameters&gt;</span>):</span><br>    <br>    <span class="hljs-keyword">return</span> &lt;<span class="hljs-keyword">return</span> expression&gt;<br></code></pre></td></tr></table></figure><p>Here is a good example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> add, mul<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">square</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> mul(x, x)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum_squares</span>(<span class="hljs-params">x, y</span>):</span><br><span class="hljs-keyword">return</span> add(square(x), square(y))<br><br>result = sum_squares(<span class="hljs-number">5</span>, <span class="hljs-number">12</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
